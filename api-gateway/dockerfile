# Build stage
FROM golang:1.24-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /build

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags="-w -s" -o api-gateway .

# Development stage with hot reload
FROM golang:1.24-alpine AS development

# Install air for hot reload and wget for health checks
RUN go install github.com/cosmtrek/air@latest && \
    apk add --no-cache wget

WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# The source code will be mounted as a volume

# Expose port
EXPOSE 8080

# Health check for development
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/v1/health || exit 1

# Run with air for hot reload
CMD ["air", "-c", ".air.toml"]

# Production stage
FROM alpine:latest AS production

# Install runtime dependencies and wget for health checks
RUN apk --no-cache add ca-certificates tzdata wget

# Create non-root user for security
RUN addgroup -g 1001 apiuser && \
    adduser -D -s /bin/sh -u 1001 -G apiuser apiuser

WORKDIR /app

# Copy the binary from builder
COPY --from=builder /build/api-gateway .

# Change ownership to non-root user
RUN chown apiuser:apiuser api-gateway

# Switch to non-root user
USER apiuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8080/api/v1/health || exit 1

# Run the binary
CMD ["./api-gateway"]