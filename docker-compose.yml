services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: baseball-db
    environment:
      - POSTGRES_DB=${DB_NAME:-baseball_sim}
      - POSTGRES_USER=${DB_USER:-baseball_user}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-baseball_pass}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/database/init:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - baseball-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-baseball_user} -d ${DB_NAME:-baseball_sim}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: baseball-pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@baseball.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - baseball-network
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped

  # Data Fetcher Service (Python/FastAPI)
  data-fetcher:
    build:
      context: ./data-fetcher
      dockerfile: dockerfile
      target: production
    container_name: baseball-data-fetcher
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-baseball_sim}
      - DB_USER=${DB_USER:-baseball_user}
      - DB_PASSWORD=${DB_PASSWORD:-baseball_pass}
      - MLB_API_BASE_URL=${MLB_API_BASE_URL:-https://statsapi.mlb.com/api/v1}
      - FETCH_INTERVAL=${FETCH_INTERVAL:-3600}
      - CIRCUIT_BREAKER_THRESHOLD=${CIRCUIT_BREAKER_THRESHOLD:-5}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-60}
    ports:
      - "${DATA_FETCHER_PORT:-8082}:8082"
    networks:
      - baseball-network
    depends_on:
      database:
        condition: service_healthy
    volumes:
      - data_logs:/app/logs
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Simulation Engine Service (Go)
  sim-engine:
    build:
      context: ./sim-engine
      dockerfile: Dockerfile
    container_name: baseball-sim-engine
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-baseball_sim}
      - DB_USER=${DB_USER:-baseball_user}
      - DB_PASSWORD=${DB_PASSWORD:-baseball_pass}
      - PORT=8081
      - WORKERS=${SIM_WORKERS:-4}
      - SIMULATION_RUNS=${SIMULATION_RUNS:-1000}
    ports:
      - "${SIM_ENGINE_PORT:-8081}:8081"
    networks:
      - baseball-network
    depends_on:
      database:
        condition: service_healthy
      data-fetcher:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # API Gateway Service (Go)
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: dockerfile
      target: production
    container_name: baseball-api-gateway
    environment:
      - DB_HOST=database
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-baseball_sim}
      - DB_USER=${DB_USER:-baseball_user}
      - DB_PASSWORD=${DB_PASSWORD:-baseball_pass}
      - PORT=8080
      - SIM_ENGINE_URL=http://sim-engine:8081
      - DATA_FETCHER_URL=http://data-fetcher:8082
      - CORS_ALLOWED_ORIGINS=${CORS_ORIGINS:-http://localhost:3000}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    networks:
      - baseball-network
    depends_on:
      database:
        condition: service_healthy
      data-fetcher:
        condition: service_started
      sim-engine:
        condition: service_started
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Frontend Service (React/Deno)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: baseball-frontend
    environment:
      - REACT_APP_API_BASE_URL=${API_BASE_URL:-http://localhost:8080/api/v1}
      - REACT_APP_WEBSOCKET_URL=${WEBSOCKET_URL:-ws://localhost:8080/ws}
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    volumes:
      - ./frontend:/app:cached
      - /app/node_modules
    networks:
      - baseball-network
    depends_on:
      - api-gateway
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: baseball-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - baseball-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: baseball-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - baseball-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: baseball-grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - baseball-network
    depends_on:
      - prometheus
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  data_logs:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Custom network for service communication
networks:
  baseball-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16